// life-cycle: new changes -> stage change -> commit -> push to remote -> create PR -> ....

// branch life-cycle:
Having: develop (for development), master (for PROD)

develop: 
	+ commit 5
	+ commit 4
	+ ....

master :
	+ commit 3
	+ ...
1. Add feature x -> branch out develop (named thuan/feature-x)
2. Fix PROD issue -> branch out master (named thuan/hotfix)


Pull: (local) master -> add commit x

local master

Create PR: (local) master -> new branch
git checkout -b <source branch> <new branch name>
git checkout master


Flow to add new feature/code to long-lived branch
1. create branch from develop
	git branch <new branch>
	git checkout -b <new-branch> <existing-source branch>
   1.1 work on existing branch
       - make sure local repo up to up with remote repo
	git checkout <existing branch>
	git fetch <remote repo>
	git rebase <target-branch>
2. add new code to working branch (new branch created at #1)
	dev
3. use git status to check all change sets
	git status
4. use git add to stage files
	git add -u // add all modified/deleted (exclude untracked triles) files
	git add . // add all changes show on screen
	git add <folder path>/* // add all files in a directory
5. use git commit to group staged files into 1 commit
	git commit -m "commit message"
6. push new branch to remote
	git push origin HEAD
	git push origin <your branch name>
		
7. create PR from new branch
8. reviewer does code review on the PR
9. merge the PR
10. delete new branch

git stash pop - get code out


